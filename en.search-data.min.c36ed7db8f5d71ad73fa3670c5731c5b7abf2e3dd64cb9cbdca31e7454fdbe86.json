[{"id":0,"href":"/valentine/","title":"Will You Be My Valentine?","section":"Rohan Hasabe","content":"My Dearest Lavi,\nEvery moment with you feels like a beautiful dream come true. Your smile brightens my darkest days, and your love makes my heart skip a beat. As Valentine\u0026rsquo;s Day approaches, I want to ask you something special\u0026hellip;\nWill you be my Valentine? üåπ\nYou\u0026rsquo;re not just my girlfriend, you\u0026rsquo;re my best friend, my partner in crime, and the most amazing person I know. Your kindness, your humor, and your beautiful soul make every day feel magical.\nI promise to:\nHold your hand through all of life\u0026rsquo;s adventures Make you laugh even on the cloudiest days Be your biggest supporter and your safest haven Love you more with each passing day What do you say? Will you make me the happiest person by being my Valentine? üíù\nWith all my love, Rohan\n"},{"id":1,"href":"/posts/2025/01/high-level-guide-to-android-apk-structure-compilation-and-analysis/","title":"High-Level Guide to Android APK: Structure, Compilation, and Analysis","section":"Posts","content":" Table of Contents # Introduction to APKs APK Structure Compilation Process Android Runtime Evolution APK Analysis Size Optimization Introduction # This guide provides a high-level overview of the Android APK structure, compilation process, and analysis techniques. It has been compiled from various sources, including official Android documentation and community resources.\nWhat is an APK # An APK (Android Package) is the package file format used by the Android operating system for the distribution and installation of mobile applications. Think of it as a container that holds all the elements necessary for your Android app to function.\nKey Characteristics # Standard Android application package format Contains all application code and resources Digitally signed for security Required for app distribution via Play Store Essential for app installation on Android devices APK Structure # An APK file is essentially a ZIP archive that contains multiple files and directories, each serving specific purposes.\nCore Components # 1. META-INF/ # Contains package signature information MANIFEST.MF: File containing resource signatures CERT.RSA: The certificate of the application CERT.SF: List of all resources and SHA-1 digests 2. lib/ # Native libraries organized by architecture Contains .so files (shared libraries) Subdirectories for different CPU architectures: armeabi-v7a arm64-v8a x86 x86_64 3. res/ # Organized by resource type: drawable/ layout/ values/ raw/ etc. 4. assets/ # Raw application assets Accessed through AssetManager Maintains original formats Often contains: Fonts Game levels Textures Pre-bundled files 5. AndroidManifest.xml # Binary XML file containing app metadata Declares: Package name Permissions Required features Components (Activities, Services, etc.) Supported screen sizes Required SDK versions 6. classes.dex # Dalvik Executable files Contains compiled application code Multiple DEX files possible (multidex) 7. resources.arsc # Compiled resource file Contains binary resource data Mapping of resource IDs to values Supports multiple configurations Compilation Process # From Source to APK # 1. Source Code Compilation # Source Files (.java, .kotlin) ‚Üì Java Bytecode (.class) ‚Üì DEX Files (.dex) 2. Resource Processing # Resource Files ‚Üì AAPT2 Processing ‚Üì Compiled Resources 3. Final Packaging # DEX Files + Compiled Resources + Native Libraries ‚Üì APK Packaging ‚Üì APK Signing ‚Üì ZIP Alignment D8: Modern converter from Java bytecode (.class) to DEX bytecode (.dex) R8: Modern replacement for ProGuard, handling code optimization and obfuscation Both tools are designed for modern Android development while maintaining compatibility with the DEX format Android Runtime Evolution # Historical Progression # 1. Dalvik Virtual Machine # Original Android runtime Register-based architecture Just-In-Time compilation Optimized for mobile constraints Battery-efficient design 2. Android Runtime (ART) # Replaced Dalvik in Android 5.0 Ahead-Of-Time compilation Improved performance Better memory management Reduced battery impact 3. Modern ART (Android 7.0+) # Hybrid compilation (JIT + AOT) Profile-guided compilation Adaptive optimization Enhanced garbage collection Improved memory management Runtime Characteristics # Dalvik vs. ART Comparison # Compilation approach Dalvik: JIT (Just-In-Time) ART: Primarily AOT (Ahead-Of-Time) Memory usage Dalvik: Lower initial storage, higher runtime ART: Higher storage, lower runtime Performance Dalvik: Good performance with optimization ART: Better overall performance Battery efficiency Dalvik: More CPU usage during runtime ART: More efficient CPU usage Format vs Runtime Separation: # The .dex format is independent of the runtime (Dalvik/ART) ART reads and executes the same DEX bytecode format This separation allowed Google to evolve the runtime without breaking compatibility Platform Architecture: # The DEX format remains fundamental to how Android organizes compiled code\nMaintaining this format ensures compatibility across the entire Android ecosystem\nTools, workflows, and existing apps continue to work without disruption\nThe relationship between Dalvik and ART is not about replacement but evolution - ART improved how the bytecode is executed while preserving the crucial DEX format that is the foundation of Android\u0026rsquo;s application architecture.\nAPK Analysis # Using APK Analyzer # There are three ways to access the APK Analyzer when a project is open: # Drag an APK or app bundle into the Editor window of Android Studio. Switch to the Project view in the Project window, then double-click the APK in the default build/output/apks/ directory. Select Build \u0026gt; Analyze APK in the menu bar, then select your APK or app bundle. 1. Basic Analysis # File size inspection Component breakdown Resource examination Manifest analysis 2. Advanced Analysis # DEX file inspection Method count verification Resource duplication check Native library examination 3. Size Analysis # Raw file sizes Download size Installation size Component size contribution Size Optimization # Optimization Strategies # 1. Code Optimization # Proguard/R8 configuration Dead code elimination Code shrinking Multidex optimization 2. Resource Optimization # Image compression Resource shrinking Drawable optimization Alternative resources management 3. Native Library Optimization # Architecture-specific inclusion Library consolidation Unnecessary library removal Version optimization Real-World Example: Photo Filter App # Initial APK Structure:\nBase APK size: 8.2MB Components: Basic UI resources: 0.5MB Filter processing library (arm64-v8a): 4MB Sample filter images: 2.5MB Other resources: 1.2MB After Optimization:\nImplemented resource shrinking Removed unused sample images Compressed remaining images Split native libraries by architecture Implemented dynamic feature delivery for filters Final Result:\nBase APK: 2.8MB Dynamic feature module (filters): 1.5MB Architecture-specific libraries: Download only what\u0026rsquo;s needed Real-World Example: Language Resource Organization (Not a real app, just for Understanding) # Common Structure Issue: /res /drawable - app_icon.png (1MB - high res) - background.jpg (2MB) /values - strings.xml (English) /values-es - strings.xml (Spanish) /values-fr - strings.xml (French) /values-de - strings.xml (German) Optimized Structure:\nImplemented drawable density splits Used language packs for non-primary languages Optimized image assets Results:\nOriginal APK size: 4.8MB Optimized base APK (English only): 1.2MB Each language pack: ~200KB Users download only needed languages After Optimization:\nImplemented resource shrinking Removed unused sample images Compressed remaining images Split native libraries by architecture Implemented dynamic feature delivery for filters Final Result:\nBase APK: 2.8MB Dynamic feature module (filters): 1.5MB Architecture-specific libraries: Download only what\u0026rsquo;s needed Best Practices for your app # Development Guidelines # 1. Size Management # Regular size monitoring Dependency management Resource optimization Code efficiency 2. Performance Optimization # Runtime consideration Memory management Battery efficiency Startup time optimization 3. Security Considerations # Proper signing ProGuard implementation Resource protection Security best practices Maintenance Guidelines # 1. Regular Monitoring # Size tracking Performance metrics User feedback Crash analytics Conclusion # Understanding APK structure, compilation, and analysis is crucial for Android development. This knowledge enables:\nBetter app optimization Improved performance Efficient size management Enhanced user experience Citation # [1]: Android Developers. \u0026#34;APK Analyzer\u0026#34;. Android Documentation. Retrieved January 26, 2025, from https://developer.android.com/tools/apkanalyzer [2]: Android Developers. \u0026#34;Analyze your build with APK Analyzer\u0026#34;. Android Documentation. Retrieved January 26, 2025, from https://developer.android.com/studio/debug/apk-analyzer [3]: Android Developers. \u0026#34;App resources overview\u0026#34;. Android Documentation. Retrieved January 26, 2025, from https://developer.android.com/guide/topics/resources/providing-resources [4]: Android Developers. \u0026#34;Application Fundamentals\u0026#34;. Android Documentation. Retrieved January 26, 2025, from https://developer.android.com/guide/components/fundamentals [5]: Android Developers. \u0026#34;App Manifest Overview\u0026#34;. Android Documentation. Retrieved January 26, 2025, from https://developer.android.com/guide/topics/manifest/manifest-intro [6]: Android Developers. \u0026#34;AAPT2\u0026#34;. Android Documentation. Retrieved January 26, 2025, from https://developer.android.com/tools/aapt2 "},{"id":2,"href":"/posts/2020/07/motorola-one-power-aka-chef-custom-rom-flashing-guide/","title":"Motorola One Power aka Chef Custom Rom Flashing Guide","section":"Posts","content":" In this guide we will be installing LineageOS official build. (Same guide can be used to flash any other custom rom!) # Prerequisite:- # Download LineageOS builds for chef from here:- (https://download.lineageos.org/chef) As Google apps are not included with the Rom download them from here:- (https://opengapps.org/), select ARM64 Android10 Nano Gapps. Official TWRP builds from:- (https://dl.twrp.me/chef/twrp-3.5.0_9-0-chef.img.html) Copy-Partition Zip; VERY IMPORTANT FOR FLASHING ROM COMING FROM STOCK. (Get from telegram group) I expect you people already have necessary adb and fastboot drivers installed. # Flashing process:- # As you can see I\u0026rsquo;m on stock rom. Reboot the device to fastboot and type the folow command to boot into twrp. fastboot boot \u0026lt;twrp.img\u0026gt; Once you are in twrp go ahead and wipe your data Once data is wiped go back to fastboot, and again boot into twrp. fastboot boot \u0026lt;twrp.img\u0026gt; Once in TWRP copy the Copy-Partition Zip to yuor device, and flash it. Once flashed go ahead and wipe only the following partitions:- Once the partitions are wiped, reboot to fastboot, and again boot into twrp. fastboot boot \u0026lt;twrp.img\u0026gt; Now copy the Rom and Gapps files onto your device. Important Step # First just flash the LineageOS rom file, let it get installed and then again reboot to fastboot and then to twrp.\nNow flash the gapps files! (YOU DONT HAVE TO FLASH GAPPS WITH PIXEL EXPERIENCE ROM AS GAPPS ARE ALREADY INCLUDED IN ROM FILE)\nWe are done flashing! Now reboot to system and enjoy your Custom Rom! The step from here on are just for LineageOS! # Now reboot to fastboot and from there select the RECOVERY MODE option and boot into LineageOS recovery, in there select Factory reset option and reboot to system, and we are finally done! If you did everything correct you will boot into the rom! # If you have any further doubts or issues join the Motorola One Power Group on Telegram:- (https://t.me/Hasaber8chat) # "},{"id":3,"href":"/posts/2020/05/git-basics-part-1-uno/","title":"Git Basics Part - 1 (UNO)","section":"Posts","content":" Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency, which can be installed on your Windows/MacOS X/Linux computer! # About Version Control # What is ‚Äúversion control‚Äù, and why should you care? Version control is a system that records changes to a file or set of files over time so that you can recall specific versions later. For the examples in this book, you will use software source code as the files being version controlled, though in reality you can do this with nearly any type of file on a computer. # Installation # For Windows Computers, go ahead and download the Git client from https://git-scm.com/download/win , just accept all the permissions (basically keep clicking ok until the installation is done), don‚Äôt change anything you don‚Äôt know.\nFor Linux Computers, just open terminal and type\n‚Äúsudo apt-get install git‚Äù click enter and git will be installed.\nFor MacOS X Computers (Install homebrew if you don\u0026rsquo;t have it already), open terminal and type ‚Äúbrew install git‚Äù Setup # Open the Git Bash client(from step 1 of installation) if you are on Windows. For Linux/MacOS X just open up the terminal.\nBefore proceeding you have to configure git to your Email. It must be a GitHub/GitLab/BitBucket registered email, so when you push a commit (more on this later), your name will come up as the commit author.\nThe following commit will help you do that\n‚Äúgit config --global user.name \u0026#34;Your Name\u0026#34;\u0026#34; \u0026amp;\n‚Äúgit config --global user.email \u0026#34;you@example.com\u0026#34;‚Äù Basic Git commands:- # git init git status git add git commit git push git log git clone Baby steps # Let‚Äôs start by making an empty folder named git-basics. $ mkdir git-basics \u0026amp;\u0026amp; cd git-basics Let\u0026rsquo;s understand what git init does before using it!\nThe git init command is the first command that you will run on Git. The git init command is used to create a new blank repository. It is used to make an existing project as a Git project. The command given below will create a new subdirectory named \u0026ldquo;.git\u0026rdquo; that holds all necessary repository files.\n$ git init Next is the \u0026lsquo;git add\u0026rsquo; command.\nNow to understand how \u0026ldquo;git add\u0026rdquo; works you can either copy-paste a file into the folder we made or make a readme.md file. I have made a readme.md file in this example. The \u0026ldquo;git add\u0026rdquo; command is used to add file contents to the git structure. This command updates the current content of the folder and prepare it for the commit!\n$ git add . (The prefix changes according to the files you want to add. If you want to add all the file changes in the next commit, use the prefix \u0026#34;.\u0026#34; . If you want to just add a specific file, use the \u0026#34;file\u0026#34; name as the prefix.) Now we commit the changes we have made!\nBut before that, here\u0026rsquo;s what \u0026ldquo;git commit\u0026rdquo; does; it is used to record the changes in the repository. It is the next command after the git add. Every commit contains the index data and the commit message.\n$ git commit -m \u0026#34;My First Commit!\u0026#34; (-m subcommand is for the commit message. There are many more subcommands in \u0026#34;git commit\u0026#34; which we will cover later on in another guide.) We have made our first commit , its time we push it. For this make an empty repository on Github: Now we push the commit to the empty repository we made. The term \u0026lsquo;push\u0026rsquo; refers to uploading the local repository content to a remote repository(in our case it\u0026rsquo;s Github). Pushing is an act of transferring commits from your local repository to a remote repository. \u0026ldquo;git push\u0026rdquo; has many subcommands about which we will learn later on in another guide.\n$ git push \u0026lt;\u0026#34;Link to your empty remote repository\u0026#34;\u0026gt; HEAD:master With this you have successfully pushed your first commit! I hope, this wont be your last commit! The advantage of a version control system is that it records changes. These records allow us to retrieve the data like commits, figuring out bugs, updates, etc. But, all of this history will be useless if we cannot navigate through it. At this point, we need the \u0026ldquo;git log\u0026rdquo; command. \u0026ldquo;Git log\u0026rdquo; is a utility tool to review and read the history of everything that happens in a repository. Multiple options can be used with a git log to make history more specific. $ git log Last basic command everyone should know is \u0026ldquo;git clone\u0026rdquo; . \u0026ldquo;git clone\u0026rdquo; is a command-line utility which is used to make a local copy of a remote repository so you can work on it locally. It accesses the repository through a remote URL. Usually, the original repository is located on a remote server, often from a Git service like GitHub, Bitbucket, or GitLab. The remote repository URL is referred to as the origin.\n$ git clone \u0026lt;\u0026#34;Link of the repo you want to clone\u0026#34;\u0026gt; Important Note:- # There are alot of commands we haven\u0026rsquo;t touched in this guide, but we will be covering that in-depth in the future.\nThank you note:-\nhttps://www.javatpoint.com/git for their excellent in-depth notes on git. https://github.com/baalajimaestro "},{"id":4,"href":"/posts/2019/06/opensource-and-monetization/","title":"Opensource and Monetization","section":"Posts","content":"Seems like these don‚Äôt go hand in hand, does it?\nLemme view it from my perspective.\nRecently there was an android kernel developer who tried to monetize his kernel in the most inappropriate way possible. It became disastrous and he became a meme in that process. He was forced to leave development, forever.\nSo, is monetizing opensource software cancerous?\nRed Hat is the global leader in open source software solutions ‚Äî and has a clear strategy in how to generate revenue. They package the popular open source operating system Linux as Red Hat Enterprise Linux and deliver it to enterprises with a promise of 10 years of support. Open source projects like Linux can literally change every day, so that‚Äôs a tall order.\nSo how do they live in the opensource market? Is monetizing opensource stuff good?\nGPL, the most renowned license in the opensource world, permits monetising the code. So where are people going wrong in their attempts to monetise their works?\nGreed is good, yes read it again, greed is good. Money rules life.\nLets see possible ways to monetize an opensource project.\nAdvertising # Monetize download links with ads, you must have seen a few people doing this. The download link is url shortened and is sent to the public.\nAds on the project website can also be a possible way to monetise your project.\nPaid Features # Lemme cite an example of this case. The pretty famous Hyperion Launcher for android is opensource. But it does have features like gestures and widgets which needs the hyperion supreme package, the paid version. The developer earns in the case where people pay for using all the cool features which are locked.\n(( Lawnchair laughs ))\nDual Licensing # Dual licensing allows companies to release commercial software (with a commercial license) that‚Äôs derived from free OSS commonly distributed under the GNU General Public (GPL) license. A company releases identical products under a commercial license and under a free license like GPL. MySQL is a pretty good example of this case, where they produce community edition under GPL and enterprise edition under their own commercial license\nPaid Support # Red Hat promises really great customer support for their premium enterprise Linux Distribution. People who rely on their servers a lot usually pay for this paid support since this ensures their servers never breaks down. This all happens while their linux source code is fully opensource.\nOpen source software is highly regarded thanks to its security, reliability, and vibrant communities that support it. Moreover, OSS helps companies avoid reinventing the wheel, and can even be used within proprietary software. Altogether, these factors have made OSS quite popular. Today, people are willing to pay for open source software to ensure legal protection, technical support, and professional services. With paid open source technologies, companies can offer the best of both worlds: transparent technology with the support and features of commercial software.\n"},{"id":5,"href":"/about/","title":"$whoami","section":"Rohan Hasabe","content":"Hey! I\u0026rsquo;m Rohan Hasabe, a 22-year-old student currently pursuing my master\u0026rsquo;s degree in CS @ NEU, Boston. I previously worked at Esper as an SDE II.\nIf you find someone with the username Hasaber8 on any platform, you can be mostly sure it\u0026rsquo;s me.\n"},{"id":6,"href":"/contact/","title":"Contact Me","section":"Rohan Hasabe","content":"I would be available on Telegram. Best would be ping me there for relevant things, please don\u0026rsquo;t spam me. If you don\u0026rsquo;t have Telegram, sorry! For any formal correspondence, Email : [hasabe.r@northeastern.edu](mailto: hasabe.r@northeastern.edu)\n"}]