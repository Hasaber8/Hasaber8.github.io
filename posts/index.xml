<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Rohan Hasabe</title>
        <link>/posts/</link>
        <description>Recent content in Posts on Rohan Hasabe</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <lastBuildDate>Thu, 23 Jan 2025 21:24:00 +0530</lastBuildDate>
        <atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>High - Level Guide to Android APK: Structure, Compilation, and Analysis</title>
            <link>/posts/2025/01/high-level-guide-to-android-apk-structure-compilation-and-analysis/</link>
            <pubDate>Thu, 23 Jan 2025 21:24:00 +0530</pubDate>
            
            <guid>/posts/2025/01/high-level-guide-to-android-apk-structure-compilation-and-analysis/</guid>
            <description>&lt;h2 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;/posts/2025/01/high-level-guide-to-android-apk-structure-compilation-and-analysis/#what-is-an-apk&#34;&gt;Introduction to APKs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/posts/2025/01/high-level-guide-to-android-apk-structure-compilation-and-analysis/#apk-structure&#34;&gt;APK Structure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/posts/2025/01/high-level-guide-to-android-apk-structure-compilation-and-analysis/#compilation-process&#34;&gt;Compilation Process&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/posts/2025/01/high-level-guide-to-android-apk-structure-compilation-and-analysis/#android-runtime-evolution&#34;&gt;Android Runtime Evolution&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/posts/2025/01/high-level-guide-to-android-apk-structure-compilation-and-analysis/#apk-analysis&#34;&gt;APK Analysis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/posts/2025/01/high-level-guide-to-android-apk-structure-compilation-and-analysis/#size-optimization&#34;&gt;Size Optimization&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;This guide provides a high-level overview of the Android APK structure, compilation process, and analysis techniques. It has been compiled from various sources, including official Android documentation and community resources.&lt;/p&gt;
&lt;h2 id=&#34;what-is-an-apk&#34;&gt;What is an APK&lt;/h2&gt;
&lt;p&gt;An APK (Android Package) is the package file format used by the Android operating system for the distribution and installation of mobile applications. Think of it as a container that holds all the elements necessary for your Android app to function.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h2 id="table-of-contents">Table of Contents</h2>
<ol>
<li><a href="/posts/2025/01/high-level-guide-to-android-apk-structure-compilation-and-analysis/#what-is-an-apk">Introduction to APKs</a></li>
<li><a href="/posts/2025/01/high-level-guide-to-android-apk-structure-compilation-and-analysis/#apk-structure">APK Structure</a></li>
<li><a href="/posts/2025/01/high-level-guide-to-android-apk-structure-compilation-and-analysis/#compilation-process">Compilation Process</a></li>
<li><a href="/posts/2025/01/high-level-guide-to-android-apk-structure-compilation-and-analysis/#android-runtime-evolution">Android Runtime Evolution</a></li>
<li><a href="/posts/2025/01/high-level-guide-to-android-apk-structure-compilation-and-analysis/#apk-analysis">APK Analysis</a></li>
<li><a href="/posts/2025/01/high-level-guide-to-android-apk-structure-compilation-and-analysis/#size-optimization">Size Optimization</a></li>
</ol>
<h2 id="introduction">Introduction</h2>
<p>This guide provides a high-level overview of the Android APK structure, compilation process, and analysis techniques. It has been compiled from various sources, including official Android documentation and community resources.</p>
<h2 id="what-is-an-apk">What is an APK</h2>
<p>An APK (Android Package) is the package file format used by the Android operating system for the distribution and installation of mobile applications. Think of it as a container that holds all the elements necessary for your Android app to function.</p>
<h3 id="key-characteristics">Key Characteristics</h3>
<ul>
<li>Standard Android application package format</li>
<li>Contains all application code and resources</li>
<li>Digitally signed for security</li>
<li>Required for app distribution via Play Store</li>
<li>Essential for app installation on Android devices</li>
</ul>
<h2 id="apk-structure">APK Structure</h2>
<p>An APK file is essentially a ZIP archive that contains multiple files and directories, each serving specific purposes.</p>
<h3 id="core-components">Core Components</h3>
<h4 id="1-meta-inf">1. META-INF/</h4>
<ul>
<li>Contains package signature information</li>
<li>MANIFEST.MF: File containing resource signatures</li>
<li>CERT.RSA: The certificate of the application</li>
<li>CERT.SF: List of all resources and SHA-1 digests</li>
</ul>
<h4 id="2-lib">2. lib/</h4>
<ul>
<li>Native libraries organized by architecture</li>
<li>Contains .so files (shared libraries)</li>
<li>Subdirectories for different CPU architectures:
<ul>
<li>armeabi-v7a</li>
<li>arm64-v8a</li>
<li>x86</li>
<li>x86_64</li>
</ul>
</li>
</ul>
<h4 id="3-res">3. res/</h4>
<ul>
<li>Organized by resource type:
<ul>
<li>drawable/</li>
<li>layout/</li>
<li>values/</li>
<li>raw/</li>
<li>etc.</li>
</ul>
</li>
</ul>
<h4 id="4-assets">4. assets/</h4>
<ul>
<li>Raw application assets</li>
<li>Accessed through AssetManager</li>
<li>Maintains original formats</li>
<li>Often contains:
<ul>
<li>Fonts</li>
<li>Game levels</li>
<li>Textures</li>
<li>Pre-bundled files</li>
</ul>
</li>
</ul>
<h4 id="5-androidmanifestxml">5. AndroidManifest.xml</h4>
<ul>
<li>Binary XML file containing app metadata</li>
<li>Declares:
<ul>
<li>Package name</li>
<li>Permissions</li>
<li>Required features</li>
<li>Components (Activities, Services, etc.)</li>
<li>Supported screen sizes</li>
<li>Required SDK versions</li>
</ul>
</li>
</ul>
<h4 id="6-classesdex">6. classes.dex</h4>
<ul>
<li>Dalvik Executable files</li>
<li>Contains compiled application code</li>
<li>Multiple DEX files possible (multidex)</li>
</ul>
<h4 id="7-resourcesarsc">7. resources.arsc</h4>
<ul>
<li>Compiled resource file</li>
<li>Contains binary resource data</li>
<li>Mapping of resource IDs to values</li>
<li>Supports multiple configurations</li>
</ul>
<h2 id="compilation-process">Compilation Process</h2>
<h4 id="from-source-to-apk">From Source to APK</h4>
<p><img alt="compilation process" src="https://github.com/user-attachments/assets/3c60090d-9804-417b-b2d1-727e578697b0"></p>
<h4 id="1-source-code-compilation">1. Source Code Compilation</h4>
<pre tabindex="0"><code>Source Files (.java, .kotlin)
        ↓
Java Bytecode (.class)
        ↓
DEX Files (.dex)
</code></pre><h4 id="2-resource-processing">2. Resource Processing</h4>
<pre tabindex="0"><code>Resource Files
        ↓
AAPT2 Processing
        ↓
Compiled Resources
</code></pre><h4 id="3-final-packaging">3. Final Packaging</h4>
<pre tabindex="0"><code>DEX Files + Compiled Resources + Native Libraries
        ↓
APK Packaging
        ↓
APK Signing
        ↓
ZIP Alignment
</code></pre><h2 id="android-runtime-evolution">Android Runtime Evolution</h2>
<h3 id="historical-progression">Historical Progression</h3>
<h4 id="1-dalvik-virtual-machine">1. Dalvik Virtual Machine</h4>
<ul>
<li>Original Android runtime</li>
<li>Register-based architecture</li>
<li>Just-In-Time compilation</li>
<li>Optimized for mobile constraints</li>
<li>Battery-efficient design</li>
</ul>
<h4 id="2-android-runtime-art">2. Android Runtime (ART)</h4>
<ul>
<li>Replaced Dalvik in Android 5.0</li>
<li>Ahead-Of-Time compilation</li>
<li>Improved performance</li>
<li>Better memory management</li>
<li>Reduced battery impact</li>
</ul>
<h4 id="3-modern-art-android-70">3. Modern ART (Android 7.0+)</h4>
<ul>
<li>Hybrid compilation (JIT + AOT)</li>
<li>Profile-guided compilation</li>
<li>Adaptive optimization</li>
<li>Enhanced garbage collection</li>
<li>Improved memory management</li>
</ul>
<h3 id="runtime-characteristics">Runtime Characteristics</h3>
<p><img alt="runtime comparision" src="https://github.com/user-attachments/assets/dd068fc3-4c02-4f8f-a4c9-cf7ffdf58043"></p>
<h4 id="dalvik-vs-art-comparison">Dalvik vs. ART Comparison</h4>
<ul>
<li>Compilation approach
<ul>
<li>Dalvik: JIT (Just-In-Time)</li>
<li>ART: Primarily AOT (Ahead-Of-Time)</li>
</ul>
</li>
<li>Memory usage
<ul>
<li>Dalvik: Lower initial storage, higher runtime</li>
<li>ART: Higher storage, lower runtime</li>
</ul>
</li>
<li>Performance
<ul>
<li>Dalvik: Good performance with optimization</li>
<li>ART: Better overall performance</li>
</ul>
</li>
<li>Battery efficiency
<ul>
<li>Dalvik: More CPU usage during runtime</li>
<li>ART: More efficient CPU usage</li>
</ul>
</li>
</ul>
<h2 id="apk-analysis">APK Analysis</h2>
<h3 id="using-apk-analyzer">Using APK Analyzer</h3>
<p><img alt="image" src="https://github.com/user-attachments/assets/83238bab-74fe-4b66-8896-18bef2664675"></p>
<h3 id="there-are-three-ways-to-access-the-apk-analyzer-when-a-project-is-open">There are three ways to access the APK Analyzer when a project is open:</h3>
<ul>
<li>Drag an APK or app bundle into the Editor window of Android Studio.</li>
<li>Switch to the Project view in the Project window, then double-click the APK in the default build/output/apks/ directory.</li>
<li>Select Build &gt; Analyze APK in the menu bar, then select your APK or app bundle.</li>
</ul>
<h4 id="1-basic-analysis">1. Basic Analysis</h4>
<ul>
<li>File size inspection</li>
<li>Component breakdown</li>
<li>Resource examination</li>
<li>Manifest analysis</li>
</ul>
<h4 id="2-advanced-analysis">2. Advanced Analysis</h4>
<ul>
<li>DEX file inspection</li>
<li>Method count verification</li>
<li>Resource duplication check</li>
<li>Native library examination</li>
</ul>
<h4 id="3-size-analysis">3. Size Analysis</h4>
<ul>
<li>Raw file sizes</li>
<li>Download size</li>
<li>Installation size</li>
<li>Component size contribution</li>
</ul>
<h2 id="size-optimization">Size Optimization</h2>
<h3 id="optimization-strategies">Optimization Strategies</h3>
<h4 id="1-code-optimization">1. Code Optimization</h4>
<ul>
<li>Proguard/R8 configuration</li>
<li>Dead code elimination</li>
<li>Code shrinking</li>
<li>Multidex optimization</li>
</ul>
<h4 id="2-resource-optimization">2. Resource Optimization</h4>
<ul>
<li>Image compression</li>
<li>Resource shrinking</li>
<li>Drawable optimization</li>
<li>Alternative resources management</li>
</ul>
<h4 id="3-native-library-optimization">3. Native Library Optimization</h4>
<ul>
<li>Architecture-specific inclusion</li>
<li>Library consolidation</li>
<li>Unnecessary library removal</li>
<li>Version optimization</li>
</ul>
<h3 id="real-world-example-photo-filter-app">Real-World Example: Photo Filter App</h3>
<p>Initial APK Structure:</p>
<ul>
<li>Base APK size: 8.2MB</li>
<li>Components:
<ul>
<li>Basic UI resources: 0.5MB</li>
<li>Filter processing library (arm64-v8a): 4MB</li>
<li>Sample filter images: 2.5MB</li>
<li>Other resources: 1.2MB</li>
</ul>
</li>
</ul>
<p>After Optimization:</p>
<ol>
<li>Implemented resource shrinking
<ul>
<li>Removed unused sample images</li>
<li>Compressed remaining images</li>
</ul>
</li>
<li>Split native libraries by architecture</li>
<li>Implemented dynamic feature delivery for filters</li>
</ol>
<p>Final Result:</p>
<ul>
<li>Base APK: 2.8MB</li>
<li>Dynamic feature module (filters): 1.5MB</li>
<li>Architecture-specific libraries: Download only what&rsquo;s needed</li>
</ul>
<h3 id="real-world-example-language-resource-organization-not-a-real-app-just-for-understanding">Real-World Example: Language Resource Organization (Not a real app, just for Understanding)</h3>
<pre tabindex="0"><code>Common Structure Issue:
/res
  /drawable
    - app_icon.png (1MB - high res)
    - background.jpg (2MB)
  /values
    - strings.xml (English)
  /values-es
    - strings.xml (Spanish)
  /values-fr
    - strings.xml (French)
  /values-de
    - strings.xml (German)
</code></pre><p>Optimized Structure:</p>
<ol>
<li>Implemented drawable density splits</li>
<li>Used language packs for non-primary languages</li>
<li>Optimized image assets</li>
</ol>
<p>Results:</p>
<ul>
<li>Original APK size: 4.8MB</li>
<li>Optimized base APK (English only): 1.2MB</li>
<li>Each language pack: ~200KB</li>
<li>Users download only needed languages</li>
</ul>
<p>After Optimization:</p>
<ol>
<li>Implemented resource shrinking
<ul>
<li>Removed unused sample images</li>
<li>Compressed remaining images</li>
</ul>
</li>
<li>Split native libraries by architecture</li>
<li>Implemented dynamic feature delivery for filters</li>
</ol>
<p>Final Result:</p>
<ul>
<li>Base APK: 2.8MB</li>
<li>Dynamic feature module (filters): 1.5MB</li>
<li>Architecture-specific libraries: Download only what&rsquo;s needed</li>
</ul>
<h2 id="best-practices-for-your-app">Best Practices for your app</h2>
<h3 id="development-guidelines">Development Guidelines</h3>
<h4 id="1-size-management">1. Size Management</h4>
<ul>
<li>Regular size monitoring</li>
<li>Dependency management</li>
<li>Resource optimization</li>
<li>Code efficiency</li>
</ul>
<h4 id="2-performance-optimization">2. Performance Optimization</h4>
<ul>
<li>Runtime consideration</li>
<li>Memory management</li>
<li>Battery efficiency</li>
<li><a href="https://developer.android.com/topic/performance/appstartup/analysis-optimization#java">Startup time optimization</a></li>
</ul>
<h4 id="3-security-considerations">3. Security Considerations</h4>
<ul>
<li>Proper signing</li>
<li><a href="https://developer.android.com/build/shrink-code">ProGuard implementation</a></li>
<li>Resource protection</li>
<li>Security best practices</li>
</ul>
<h3 id="maintenance-guidelines">Maintenance Guidelines</h3>
<h4 id="1-regular-monitoring">1. Regular Monitoring</h4>
<ul>
<li>Size tracking</li>
<li>Performance metrics</li>
<li>User feedback</li>
<li>Crash analytics</li>
</ul>
<h2 id="conclusion">Conclusion</h2>
<p>Understanding APK structure, compilation, and analysis is crucial for Android development. This knowledge enables:</p>
<ul>
<li>Better app optimization</li>
<li>Improved performance</li>
<li>Efficient size management</li>
<li>Enhanced user experience</li>
</ul>
<h3 id="citation">Citation</h3>
<ul>
<li><a href="https://developer.android.com/tools/apkanalyzer">https://developer.android.com/tools/apkanalyzer</a></li>
<li><a href="https://developer.android.com/studio/debug/apk-analyzer">https://developer.android.com/studio/debug/apk-analyzer</a></li>
<li><a href="https://developer.android.com/guide/topics/resources/providing-resources">https://developer.android.com/guide/topics/resources/providing-resources</a></li>
<li><a href="https://developer.android.com/guide/components/fundamentals">https://developer.android.com/guide/components/fundamentals</a></li>
<li><a href="https://developer.android.com/guide/topics/manifest/manifest-intro">https://developer.android.com/guide/topics/manifest/manifest-intro</a></li>
<li><a href="https://developer.android.com/tools/aapt2">https://developer.android.com/tools/aapt2</a></li>
<li><a href="https://developer.android.com/tools/apkanalyzer">https://developer.android.com/tools/apkanalyzer</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Motorola One Power aka Chef Custom Rom Flashing Guide</title>
            <link>/posts/2020/07/motorola-one-power-aka-chef-custom-rom-flashing-guide/</link>
            <pubDate>Tue, 07 Jul 2020 10:24:00 +0530</pubDate>
            
            <guid>/posts/2020/07/motorola-one-power-aka-chef-custom-rom-flashing-guide/</guid>
            <description>&lt;h3 id=&#34;in-this-guide-we-will-be-installing-lineageos-official-build-same-guide-can-be-used-to-flash-any-other-custom-rom&#34;&gt;In this guide we will be installing LineageOS official build. (Same guide can be used to flash any other custom rom!)&lt;/h3&gt;
&lt;h2 id=&#34;prerequisite-&#34;&gt;Prerequisite:-&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Download LineageOS builds for chef from here:- (&lt;a href=&#34;https://download.lineageos.org/chef&#34;&gt;https://download.lineageos.org/chef&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;As Google apps are not included with the Rom download them from here:- (&lt;a href=&#34;https://opengapps.org/)&#34;&gt;https://opengapps.org/)&lt;/a&gt;, select ARM64 Android10 Nano Gapps.&lt;/li&gt;
&lt;li&gt;Official TWRP builds from:- (&lt;a href=&#34;https://dl.twrp.me/chef/twrp-3.5.0_9-0-chef.img.html&#34;&gt;https://dl.twrp.me/chef/twrp-3.5.0_9-0-chef.img.html&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Copy-Partition Zip; VERY IMPORTANT FOR FLASHING ROM COMING FROM STOCK. (Get from telegram group)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt=&#34;Screenshot 2020-07-07 at 19 08 56&#34; src=&#34;https://user-images.githubusercontent.com/43720061/86805570-9a52d000-c095-11ea-8375-878d876ab01d.png&#34;&gt;&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h3 id="in-this-guide-we-will-be-installing-lineageos-official-build-same-guide-can-be-used-to-flash-any-other-custom-rom">In this guide we will be installing LineageOS official build. (Same guide can be used to flash any other custom rom!)</h3>
<h2 id="prerequisite-">Prerequisite:-</h2>
<ol>
<li>Download LineageOS builds for chef from here:- (<a href="https://download.lineageos.org/chef">https://download.lineageos.org/chef</a>)</li>
<li>As Google apps are not included with the Rom download them from here:- (<a href="https://opengapps.org/)">https://opengapps.org/)</a>, select ARM64 Android10 Nano Gapps.</li>
<li>Official TWRP builds from:- (<a href="https://dl.twrp.me/chef/twrp-3.5.0_9-0-chef.img.html">https://dl.twrp.me/chef/twrp-3.5.0_9-0-chef.img.html</a>)</li>
<li>Copy-Partition Zip; VERY IMPORTANT FOR FLASHING ROM COMING FROM STOCK. (Get from telegram group)</li>
</ol>
<p><img alt="Screenshot 2020-07-07 at 19 08 56" src="https://user-images.githubusercontent.com/43720061/86805570-9a52d000-c095-11ea-8375-878d876ab01d.png"></p>
<ul>
<li>
<h3 id="i-expect-you-people-already-have-necessary-adb-and-fastboot-drivers-installed">I expect you people already have necessary adb and fastboot drivers installed.</h3>
</li>
</ul>
<h2 id="flashing-process-">Flashing process:-</h2>
<ol>
<li>As you can see I&rsquo;m on stock rom.</li>
</ol>
<p><img alt="IMG_20200707_190606" src="https://user-images.githubusercontent.com/43720061/86801637-de43d600-c091-11ea-82b8-bb268b1c8efc.jpg"></p>
<ol start="2">
<li>Reboot the device to fastboot and type the folow command to boot into twrp.</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>fastboot boot &lt;twrp.img&gt;
</span></span></code></pre></div><ol start="3">
<li>Once you are in twrp go ahead and wipe your data</li>
</ol>
<p><img alt="IMG_20200707_191008" src="https://user-images.githubusercontent.com/43720061/86809655-b6587080-c099-11ea-80bc-350f6498860b.jpg"></p>
<ol start="4">
<li>Once data is wiped go back to fastboot, and again boot into twrp.</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>fastboot boot &lt;twrp.img&gt;
</span></span></code></pre></div><p><img alt="Screenshot 2020-07-07 at 19 11 06" src="https://user-images.githubusercontent.com/43720061/86809874-f7508500-c099-11ea-85fb-3bd938d19b10.png"></p>
<ol start="5">
<li>Once in TWRP copy the Copy-Partition Zip to yuor device, and flash it.</li>
</ol>
<p><img alt="Screenshot 2020-07-07 at 19 11 19" src="https://user-images.githubusercontent.com/43720061/86810013-1ea75200-c09a-11ea-97ba-2422362705ee.png"></p>
<ol start="6">
<li>Once flashed go ahead and wipe only the following partitions:-</li>
</ol>
<p><img alt="IMG_20200707_191238" src="https://user-images.githubusercontent.com/43720061/86810284-6332ed80-c09a-11ea-9b83-49add0f36802.jpg"></p>
<ol start="7">
<li>Once the partitions are wiped, reboot to fastboot, and again boot into twrp.</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>fastboot boot &lt;twrp.img&gt;
</span></span></code></pre></div><ol start="8">
<li>Now copy the Rom and Gapps files onto your device.</li>
</ol>
<p><img alt="Screenshot 2020-07-07 at 19 13 56" src="https://user-images.githubusercontent.com/43720061/86810668-c9b80b80-c09a-11ea-9a1b-0017c7f849a8.png"></p>
<h3 id="important-step">Important Step</h3>
<ol start="9">
<li>
<p>First just flash the LineageOS rom file, let it get installed and then again reboot to fastboot and then to twrp.</p>
</li>
<li>
<p>Now flash the gapps files! (YOU DONT HAVE TO FLASH GAPPS WITH PIXEL EXPERIENCE ROM AS GAPPS ARE ALREADY INCLUDED IN ROM FILE)</p>
</li>
</ol>
<p><img alt="IMG_20200707_192024" src="https://user-images.githubusercontent.com/43720061/86810996-113e9780-c09b-11ea-808b-3c7f390116a1.jpg"></p>
<ol start="11">
<li>We are done flashing! Now reboot to system and enjoy your Custom Rom!</li>
</ol>
<h3 id="the-step-from-here-on-are-just-for-lineageos">The step from here on are just for LineageOS!</h3>
<ol start="12">
<li>Now reboot to fastboot and from there select the RECOVERY MODE option and boot into LineageOS recovery, in there select Factory reset option and reboot to system, and we are finally done!</li>
</ol>
<h3 id="if-you-did-everything-correct-you-will-boot-into-the-rom">If you did everything correct you will boot into the rom!</h3>
<p><img alt="IMG_20200707_193358" src="https://user-images.githubusercontent.com/43720061/86811764-e86ad200-c09b-11ea-8926-fcee2e744188.jpg"></p>
<h2 id="if-you-have-any-further-doubts-or-issues-join-the-motorola-one-power-group-on-telegram--httpstmehasaber8chat">If you have any further doubts or issues join the Motorola One Power Group on Telegram:- (<a href="https://t.me/Hasaber8chat">https://t.me/Hasaber8chat</a>)</h2>
]]></content>
        </item>
        
        <item>
            <title>Git Basics Part - 1 (UNO)</title>
            <link>/posts/2020/05/git-basics-part-1-uno/</link>
            <pubDate>Thu, 28 May 2020 21:24:00 +0530</pubDate>
            
            <guid>/posts/2020/05/git-basics-part-1-uno/</guid>
            <description>&lt;h2 id=&#34;git-is-a-free-and-open-source-distributed-version-control-system-designed-to-handle-everything-from-small-to-very-large-projects-with-speed-and-efficiency-which-can-be-installed-on-your-windowsmacos-xlinux-computer&#34;&gt;Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency, which can be installed on your Windows/MacOS X/Linux computer!&lt;/h2&gt;
&lt;h2 id=&#34;about-version-control&#34;&gt;About Version Control&lt;/h2&gt;
&lt;h4 id=&#34;what-is-version-control-and-why-should-you-care-version-control-is-a-system-that-records-changes-to-a-file-or-set-of-files-over-time-so-that-you-can-recall-specific-versions-later-for-the-examples-in-this-book-you-will-use-software-source-code-as-the-files-being-version-controlled-though-in-reality-you-can-do-this-with-nearly-any-type-of-file-on-a-computer&#34;&gt;What is “version control”, and why should you care? Version control is a system that records changes to a file or set of files over time so that you can recall specific versions later. For the examples in this book, you will use software source code as the files being version controlled, though in reality you can do this with nearly any type of file on a computer.&lt;/h4&gt;
&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;For Windows Computers, go ahead and download the Git client from &lt;a href=&#34;https://git-scm.com/download/win&#34;&gt;https://git-scm.com/download/win&lt;/a&gt; , just accept all the permissions (basically keep clicking ok until the installation is done), don’t change anything you don’t know.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h2 id="git-is-a-free-and-open-source-distributed-version-control-system-designed-to-handle-everything-from-small-to-very-large-projects-with-speed-and-efficiency-which-can-be-installed-on-your-windowsmacos-xlinux-computer">Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency, which can be installed on your Windows/MacOS X/Linux computer!</h2>
<h2 id="about-version-control">About Version Control</h2>
<h4 id="what-is-version-control-and-why-should-you-care-version-control-is-a-system-that-records-changes-to-a-file-or-set-of-files-over-time-so-that-you-can-recall-specific-versions-later-for-the-examples-in-this-book-you-will-use-software-source-code-as-the-files-being-version-controlled-though-in-reality-you-can-do-this-with-nearly-any-type-of-file-on-a-computer">What is “version control”, and why should you care? Version control is a system that records changes to a file or set of files over time so that you can recall specific versions later. For the examples in this book, you will use software source code as the files being version controlled, though in reality you can do this with nearly any type of file on a computer.</h4>
<h2 id="installation">Installation</h2>
<ol>
<li>
<p>For Windows Computers, go ahead and download the Git client from <a href="https://git-scm.com/download/win">https://git-scm.com/download/win</a> , just accept all the permissions (basically keep clicking ok until the installation is done), don’t change anything you don’t know.</p>
</li>
<li>
<p>For Linux Computers, just open terminal and type</p>
</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span> “sudo apt-get install git” 
</span></span></code></pre></div><p>click enter and git will be installed.</p>
<ol start="3">
<li>For MacOS X Computers (Install homebrew if you don&rsquo;t have it already), open terminal and type</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>“brew install git”
</span></span></code></pre></div><h2 id="setup">Setup</h2>
<ol>
<li>
<p>Open the Git Bash client(from step 1 of installation) if you are on Windows. For Linux/MacOS X just open up the terminal.</p>
</li>
<li>
<p>Before proceeding you have to configure git to your Email. It must be a GitHub/GitLab/BitBucket registered email, so when you push a commit (more on this later), your name will come up as the commit author.</p>
</li>
<li>
<p>The following commit will help you do that</p>
</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>“git config --global user.name <span style="color:#e6db74">&#34;Your Name&#34;&#34; 
</span></span></span></code></pre></div><p>&amp;</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>“git config --global user.email <span style="color:#e6db74">&#34;you@example.com&#34;</span>”
</span></span></code></pre></div><p><img alt="Screenshot 2020-05-27 at 17 13 25" src="https://user-images.githubusercontent.com/43720061/83187201-68bc2000-a14b-11ea-90ec-c0506e4fc1d1.png"></p>
<h2 id="basic-git-commands-">Basic Git commands:-</h2>
<ul>
<li>git init</li>
<li>git status</li>
<li>git add</li>
<li>git commit</li>
<li>git push</li>
<li>git log</li>
<li>git clone</li>
</ul>
<h2 id="baby-steps">Baby steps</h2>
<ol>
<li>Let’s start by making an empty folder named git-basics.</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ mkdir git-basics <span style="color:#f92672">&amp;&amp;</span> cd git-basics
</span></span></code></pre></div><p><img alt="Screenshot 2020-05-29 at 01 28 04" src="https://user-images.githubusercontent.com/43720061/83187390-b769ba00-a14b-11ea-9408-ac87200c33c8.png"></p>
<ol start="2">
<li>
<p>Let&rsquo;s understand what git init does before using it!</p>
<p>The git init command is the first command that you will run on Git. The git init command is used to create a new blank repository. It is used to make an existing project as a    Git project. The command given below will create a new subdirectory named &ldquo;.git&rdquo; that holds all necessary repository files.</p>
</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ git init
</span></span></code></pre></div><p><img alt="Screenshot 2020-05-29 at 01 34 05" src="https://user-images.githubusercontent.com/43720061/83187900-8342c900-a14c-11ea-9b54-f8cb2f0495ea.png"></p>
<ol start="3">
<li>
<p>Next is the &lsquo;git add&rsquo; command.</p>
<p>Now to understand how &ldquo;git add&rdquo; works you can either copy-paste a file into the folder we made or make a readme.md file. I have made a readme.md file in this example.            The &ldquo;git add&rdquo; command is used to add file contents to the git structure. This command updates the current content of the folder and prepare it for the commit!</p>
</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ git add . <span style="color:#f92672">(</span>The prefix changes according to the files you want to add. If you want to add all the file changes in the next commit, use the prefix <span style="color:#e6db74">&#34;.&#34;</span> . If you want to just add a specific file, use the <span style="color:#e6db74">&#34;file&#34;</span> name as the prefix.<span style="color:#f92672">)</span>
</span></span></code></pre></div><p><img alt="Screenshot 2020-05-29 at 01 43 07" src="https://user-images.githubusercontent.com/43720061/83188773-d49f8800-a14d-11ea-8e07-2e8bc5cd309c.png"></p>
<ol start="4">
<li>
<p>Now we commit the changes we have made!</p>
<p>But before that, here&rsquo;s what &ldquo;git commit&rdquo; does; it is used to record the changes in the repository. It is the next command after the git add. Every commit contains the      index data and the commit message.</p>
</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ git commit -m <span style="color:#e6db74">&#34;My First Commit!&#34;</span> <span style="color:#f92672">(</span>-m subcommand is <span style="color:#66d9ef">for</span> the commit message. There are many more subcommands in <span style="color:#e6db74">&#34;git commit&#34;</span> which we will cover later on in another guide.<span style="color:#f92672">)</span>
</span></span></code></pre></div><p><img alt="Screenshot 2020-05-29 at 01 51 35" src="https://user-images.githubusercontent.com/43720061/83189692-fa795c80-a14e-11ea-8011-9cd0ba2fe246.png"></p>
<ol start="5">
<li>
<p>We have made our first commit , its time we push it. For this make an empty repository on Github:
<img alt="ezgif com-video-to-gif" src="https://user-images.githubusercontent.com/43720061/83191770-33670080-a152-11ea-9d85-7fddab42b0de.gif"></p>
</li>
<li>
<p>Now we push the commit to the empty repository we made. The term &lsquo;push&rsquo; refers to uploading the local repository content to a remote repository(in our case it&rsquo;s Github). Pushing is an act of transferring commits from your local repository to a remote repository. &ldquo;git push&rdquo; has many subcommands about which we will learn later on in another guide.</p>
</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ git push &lt;<span style="color:#e6db74">&#34;Link to your empty remote repository&#34;</span>&gt; HEAD:master
</span></span></code></pre></div><p><img alt="Screenshot 2020-05-29 at 02 20 59" src="https://user-images.githubusercontent.com/43720061/83192377-0ff08580-a153-11ea-8162-f7bbfdd9fbff.png"></p>
<ol start="7">
<li>With this you have successfully pushed your first commit! I hope, this wont be your last commit!</li>
</ol>
<p><img alt="Screenshot 2020-05-29 at 02 22 57" src="https://user-images.githubusercontent.com/43720061/83192562-59d96b80-a153-11ea-84ec-432e342c944a.png"></p>
<ol start="8">
<li>The advantage of a version control system is that it records changes. These records allow us to retrieve the data like commits, figuring out bugs, updates, etc. But, all of this history will be useless if we cannot navigate through it. At this point, we need the &ldquo;git log&rdquo; command.
&ldquo;Git log&rdquo; is a utility tool to review and read the history of everything that happens in a repository. Multiple options can be used with a git log to make history more specific.</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ git log
</span></span></code></pre></div><p><img alt="Screenshot 2020-05-29 at 02 26 58" src="https://user-images.githubusercontent.com/43720061/83192952-e2f0a280-a153-11ea-9aca-83f4f0fe44de.png"></p>
<ol start="9">
<li>Last basic command everyone should know is &ldquo;git clone&rdquo; .</li>
</ol>
<p>&ldquo;git clone&rdquo; is a command-line utility which is used to make a local copy of a remote repository so you can work on it locally. It accesses the repository through a remote URL.
Usually, the original repository is located on a remote server, often from a Git service like GitHub, Bitbucket, or GitLab. The remote repository URL is referred to as the origin.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ git clone &lt;<span style="color:#e6db74">&#34;Link of the repo you want to clone&#34;</span>&gt;
</span></span></code></pre></div><p><img alt="Screenshot 2020-05-29 at 02 30 56" src="https://user-images.githubusercontent.com/43720061/83193346-77f39b80-a154-11ea-94a2-05bc064a61b0.png"></p>
<h2 id="important-note-">Important Note:-</h2>
<p>There are alot of commands we haven&rsquo;t touched in this guide, but we will be covering that in-depth in the future.</p>
<p>Thank you note:-</p>
<ol>
<li><a href="https://www.javatpoint.com/git">https://www.javatpoint.com/git</a> for their excellent in-depth notes on git.</li>
<li><a href="https://github.com/baalajimaestro">https://github.com/baalajimaestro</a></li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>Opensource and Monetization</title>
            <link>/posts/2019/06/opensource-and-monetization/</link>
            <pubDate>Mon, 24 Jun 2019 03:30:00 +0530</pubDate>
            
            <guid>/posts/2019/06/opensource-and-monetization/</guid>
            <description>&lt;p&gt;Seems like these don’t go hand in hand, does it?&lt;/p&gt;
&lt;p&gt;Lemme view it from my perspective.&lt;/p&gt;
&lt;p&gt;Recently there was an android kernel developer who tried to monetize his kernel in the most inappropriate way possible. It became disastrous and he became a meme in that process. He was forced to leave development, forever.&lt;/p&gt;
&lt;p&gt;So, is monetizing opensource software cancerous?&lt;/p&gt;
&lt;p&gt;Red Hat is the global leader in open source software solutions — and has a clear strategy in how to generate revenue. They package the popular open source operating system Linux as Red Hat Enterprise Linux and deliver it to enterprises with a promise of 10 years of support. Open source projects like Linux can literally change every day, so that’s a tall order.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>Seems like these don’t go hand in hand, does it?</p>
<p>Lemme view it from my perspective.</p>
<p>Recently there was an android kernel developer who tried to monetize his kernel in the most inappropriate way possible. It became disastrous and he became a meme in that process. He was forced to leave development, forever.</p>
<p>So, is monetizing opensource software cancerous?</p>
<p>Red Hat is the global leader in open source software solutions — and has a clear strategy in how to generate revenue. They package the popular open source operating system Linux as Red Hat Enterprise Linux and deliver it to enterprises with a promise of 10 years of support. Open source projects like Linux can literally change every day, so that’s a tall order.</p>
<p>So how do they live in the opensource market?
Is monetizing opensource stuff good?</p>
<p>GPL, the most renowned license in the opensource world, permits monetising the code.
So where are people going wrong in their attempts to monetise their works?</p>
<p>Greed is good, yes read it again, greed is good. Money rules life.</p>
<p>Lets see possible ways to monetize an opensource project.</p>
<h4 id="advertising">Advertising</h4>
<p>Monetize download links with ads, you must have seen a few people doing this. The download link is url shortened and is sent to the public.</p>
<p>Ads on the project website can also be a possible way to monetise your project.</p>
<h4 id="paid-features">Paid Features</h4>
<p>Lemme cite an example of this case. The pretty famous Hyperion Launcher for android is opensource. But it does have features like gestures and widgets which needs the hyperion supreme package, the paid version. The developer earns in the case where people pay for using all the cool features which are locked.</p>
<p>(( Lawnchair laughs ))</p>
<h4 id="dual-licensing">Dual Licensing</h4>
<p>Dual licensing allows companies to release commercial software (with a commercial license) that’s derived from free OSS commonly distributed under the GNU General Public (GPL) license. A company releases identical products under a commercial license and under a free license like GPL. MySQL is a pretty good example of this case, where they produce community edition under GPL and enterprise edition under their own commercial license</p>
<h4 id="paid-support">Paid Support</h4>
<p>Red Hat promises really great customer support for their premium enterprise Linux Distribution. People who rely on their servers a lot usually pay for this paid support since this ensures their servers never breaks down. This all happens while their linux source code is fully opensource.</p>
<p>Open source software is highly regarded thanks to its security, reliability, and vibrant communities that support it. Moreover, OSS helps companies avoid reinventing the wheel, and can even be used within proprietary software. Altogether, these factors have made OSS quite popular. Today, people are willing to pay for open source software to ensure legal protection, technical support, and professional services. With paid open source technologies, companies can offer the best of both worlds: transparent technology with the support and features of commercial software.</p>
]]></content>
        </item>
        
    </channel>
</rss>
