<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Hasaber8</title>
        <link>https://hasaber.me/posts/</link>
        <description>Recent content in Posts on Hasaber8</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>Rohan Hasabe</copyright>
        <lastBuildDate>Sun, 07 Jun 2020 19:51:00 +0530</lastBuildDate>
        <atom:link href="https://hasaber.me/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Violet PE June Changelog!</title>
            <link>https://hasaber.me/posts/pe-violet-june-changelog/</link>
            <pubDate>Sun, 07 Jun 2020 19:51:00 +0530</pubDate>
            
            <guid>https://hasaber.me/posts/pe-violet-june-changelog/</guid>
            <description>Source Side changes:-  June security patch Fixed recorder crashes Improved network traffic indicator Improved volume panel on left side (for supported devices) Updated translations Fix vibration enabled when battery saver is enabled Implement quick QS brightness slider Updated some prebuilt system apps Other minor changes  Device Side changes:-  QC3 is fixed now! OTA will only work if you are using AOSP recovery! If you are using TWRP please download the full build!</description>
            <content type="html"><![CDATA[<h3 id="source-side-changes-">Source Side changes:-</h3>
<ul>
<li>June security patch</li>
<li>Fixed recorder crashes</li>
<li>Improved network traffic indicator</li>
<li>Improved volume panel on left side (for supported devices)</li>
<li>Updated translations</li>
<li>Fix vibration enabled when battery saver is enabled</li>
<li>Implement quick QS brightness slider</li>
<li>Updated some prebuilt system apps</li>
<li>Other minor changes</li>
</ul>
<h3 id="device-side-changes-">Device Side changes:-</h3>
<ul>
<li>QC3 is fixed now!</li>
<li>OTA will only work if you are using AOSP recovery!</li>
<li>If you are using TWRP please download the full build!</li>
</ul>
<h3 id="very-important-notice-">Very Important Notice:-</h3>
<ul>
<li>From now on Hentai and PE will have completely different trees, feature and changelog, please don&rsquo;t compare them!</li>
</ul>
<h3 id="you-dont-need-to--but-if-you-want-donate-">You don&rsquo;t need to , but if you want donate:-</h3>
<ul>
<li>PayPal:- <a href="https://www.paypal.me/rohanhasabe8">https://www.paypal.me/rohanhasabe8</a></li>
<li>UPI-ID:- hasaberohan@icici</li>
</ul>
<p><img src="https://user-images.githubusercontent.com/43720061/83972302-00183480-a8fd-11ea-8707-718b4352ef49.jpg" alt="Screenshot_20200607-202417123"></p>
]]></content>
        </item>
        
        <item>
            <title>Git Basics</title>
            <link>https://hasaber.me/posts/git-basics/</link>
            <pubDate>Thu, 28 May 2020 21:24:00 +0530</pubDate>
            
            <guid>https://hasaber.me/posts/git-basics/</guid>
            <description>Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency. Which can be installed on your Windows/MacOS X/Linux computer!  Installation  For Windows Computers go ahead and download the Git client from https://git-scm.com/download/win , just accept all the permissions basically keep clicking ok until the installation is done, don’t change anything you don’t know. For Linux Computers just open terminal and type  “sudo apt-get install git” and enter, git will be installed in 1-2 minutes according to you internet connection.</description>
            <content type="html"><![CDATA[<h3 id="git-is-a-free-and-open-source-distributed-version-control-system-designed-to-handle-everything-from-small-to-very-large-projects-with-speed-and-efficiency--which-can-be-installed-on-your-windowsmacos-xlinux-computer">Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency.  Which can be installed on your Windows/MacOS X/Linux computer! </h3>
<h3 id="installation">Installation</h3>
<ol>
<li>For Windows Computers go ahead and download the Git client from <a href="https://git-scm.com/download/win">https://git-scm.com/download/win</a> , just accept all the permissions basically keep clicking ok until the installation is done, don’t change anything you don’t know.</li>
<li>For Linux Computers just open terminal and type</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"> “sudo apt-get install git” 
</code></pre></div><p>and enter, git will be installed in 1-2 minutes according to you internet connection.</p>
<ol start="3">
<li>For MacOS X Computers open terminal and type</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">“brew install git”
</code></pre></div><p>(Install homebrew if you don&rsquo;t already have it)</p>
<h3 id="setup">Setup</h3>
<ol>
<li>Open the Git Bash client if you are on Windows, for Linux/MacOS X just open up the terminal.</li>
<li>Before anything you have to configure git for your Email it must be a GitHub/GitLab/BitBucket registered email, so when you push a commit (more on this later), your name will come up as the commit author.</li>
<li>The following commit will help you do that</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">“git config --global user.name <span style="color:#e6db74">&#34;Your Name&#34;&#34; 
</span></code></pre></div><p>&amp;</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">“git config --global user.email <span style="color:#e6db74">&#34;you@example.com&#34;</span>”
</code></pre></div><p><img src="https://user-images.githubusercontent.com/43720061/83187201-68bc2000-a14b-11ea-90ec-c0506e4fc1d1.png" alt="Screenshot 2020-05-27 at 17 13 25"></p>
<h3 id="basic-git-commands-">Basic Git commands:-</h3>
<ul>
<li>git init</li>
<li>git status</li>
<li>git add</li>
<li>git commit</li>
<li>git push</li>
<li>git log</li>
<li>git clone</li>
</ul>
<h3 id="baby-steps">Baby steps</h3>
<ol>
<li>Let’s start by making an empty folder name git-basics.</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ mkdir git-basics <span style="color:#f92672">&amp;&amp;</span> cd git-basics
</code></pre></div><p><img src="https://user-images.githubusercontent.com/43720061/83187390-b769ba00-a14b-11ea-9408-ac87200c33c8.png" alt="Screenshot 2020-05-29 at 01 28 04"></p>
<ol start="2">
<li>Lets understand what git init do before using it!
The git init command is the first command that you will run on Git. The git init command is used to create a new blank repository. It is used to make an existing project as a Git project. The below command will create a new subdirectory named .git that holds all necessary repository files.</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ git init
</code></pre></div><p><img src="https://user-images.githubusercontent.com/43720061/83187900-8342c900-a14c-11ea-9b54-f8cb2f0495ea.png" alt="Screenshot 2020-05-29 at 01 34 05"></p>
<ol start="3">
<li>Now to understand how &ldquo;git add&rdquo; works you can either copy paste a file into the folder we made or make a readme.md file, ill be making a readme.md file in this example. The &ldquo;git add&rdquo; command is used to add file contents to the git structure. This command updates the current content of the folder and prepare it for the commit!</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ git add . <span style="color:#f92672">(</span>The prefix changes according to the files you want to add, <span style="color:#66d9ef">if</span> you want to add all the file changes in the next commit you use the prefix <span style="color:#e6db74">&#34;.&#34;</span> , <span style="color:#66d9ef">if</span> you want to just add a specific file you use the file name as the prefix.<span style="color:#f92672">)</span>
</code></pre></div><p><img src="https://user-images.githubusercontent.com/43720061/83188773-d49f8800-a14d-11ea-8e07-2e8bc5cd309c.png" alt="Screenshot 2020-05-29 at 01 43 07"></p>
<ol start="4">
<li>Now we commit the changes we have made! But before that here what &ldquo;git commit&rdquo; does; It is used to record the changes in the repository. It is the next command after the git add. Every commit contains the index data and the commit message.</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ git commit -m <span style="color:#e6db74">&#34;My First Commit!&#34;</span> <span style="color:#f92672">(</span>-m subcommand is <span style="color:#66d9ef">for</span> the commit message, there are many more subcommands in <span style="color:#e6db74">&#34;git commit&#34;</span> which we will cover later on in another guide xD<span style="color:#f92672">)</span>
</code></pre></div><p><img src="https://user-images.githubusercontent.com/43720061/83189692-fa795c80-a14e-11ea-8011-9cd0ba2fe246.png" alt="Screenshot 2020-05-29 at 01 51 35"></p>
<ol start="5">
<li>Now that we have made our first commit , its time we push it, for this make a empty repo on Github.</li>
</ol>
<p><img src="https://user-images.githubusercontent.com/43720061/83191770-33670080-a152-11ea-9d85-7fddab42b0de.gif" alt="ezgif com-video-to-gif"></p>
<ol start="6">
<li>Now we push the commit to the empty repo we made. The push term refers to upload local repository content to a remote repository(in our case it&rsquo;s Github). Pushing is an act of transfer commits from your local repository to a remote repository. &ldquo;git push&rdquo; has many subcommands about which we will learn later on in another guide.</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ git push &lt;<span style="color:#e6db74">&#34;Link to your empty remote repository&#34;</span>&gt; HEAD:master
</code></pre></div><p><img src="https://user-images.githubusercontent.com/43720061/83192377-0ff08580-a153-11ea-8162-f7bbfdd9fbff.png" alt="Screenshot 2020-05-29 at 02 20 59"></p>
<ol start="7">
<li>With this you have successfully pushed your first commit! I hope, this wont be your last commit xD.</li>
</ol>
<p><img src="https://user-images.githubusercontent.com/43720061/83192562-59d96b80-a153-11ea-84ec-432e342c944a.png" alt="Screenshot 2020-05-29 at 02 22 57"></p>
<ol start="8">
<li>The advantage of a version control system is that it records changes. These records allow us to retrieve the data like commits, figuring out bugs, updates. But, all of this history will be useless if we cannot navigate it. At this point, we need the &ldquo;git log&rdquo; command.
&ldquo;Git log&rdquo; is a utility tool to review and read a history of everything that happens to a repository. Multiple options can be used with a git log to make history more specific.</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ git log
</code></pre></div><p><img src="https://user-images.githubusercontent.com/43720061/83192952-e2f0a280-a153-11ea-9aca-83f4f0fe44de.png" alt="Screenshot 2020-05-29 at 02 26 58"></p>
<ol start="9">
<li>Last basic command everyone should know (according to me) is &ldquo;git clone&rdquo;
The git clone is a command-line utility which is used to make a local copy of a remote repository so you can work on it locally. It accesses the repository through a remote URL.
Usually, the original repository is located on a remote server, often from a Git service like GitHub, Bitbucket, or GitLab. The remote repository URL is referred to the origin.</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ git clone &lt;<span style="color:#e6db74">&#34;Link of the repo you want to clone&#34;</span>&gt;
</code></pre></div><p><img src="https://user-images.githubusercontent.com/43720061/83193346-77f39b80-a154-11ea-94a2-05bc064a61b0.png" alt="Screenshot 2020-05-29 at 02 30 56"></p>
<h3 id="important-note-">Important Note:-</h3>
<p>There are alot of command we haven&rsquo;t touched in this guide, but we will be doing that in future in-depth guides!</p>
<p>Thank you note:-</p>
<ol>
<li><a href="https://www.javatpoint.com/git">https://www.javatpoint.com/git</a> for their excellent in-depth notes on git.</li>
<li><a href="https://github.com/baalajimaestro">https://github.com/baalajimaestro</a></li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>Opensource and Monetization</title>
            <link>https://hasaber.me/posts/opensource-and-monetisation/</link>
            <pubDate>Mon, 24 Jun 2019 03:30:00 +0530</pubDate>
            
            <guid>https://hasaber.me/posts/opensource-and-monetisation/</guid>
            <description>Seems like these don’t go hand in hand, does it?
Lemme view it from my perspective.
Recently there was an android kernel developer who tried to monetize his kernel in the most inappropriate way possible. It became disastrous and he became a meme in that process. He was forced to leave development, forever.
So, is monetizing opensource software cancerous?
Red Hat is the global leader in open source software solutions — and has a clear strategy in how to generate revenue.</description>
            <content type="html"><![CDATA[<p>Seems like these don’t go hand in hand, does it?</p>
<p>Lemme view it from my perspective.</p>
<p>Recently there was an android kernel developer who tried to monetize his kernel in the most inappropriate way possible. It became disastrous and he became a meme in that process. He was forced to leave development, forever.</p>
<p>So, is monetizing opensource software cancerous?</p>
<p>Red Hat is the global leader in open source software solutions — and has a clear strategy in how to generate revenue. They package the popular open source operating system Linux as Red Hat Enterprise Linux and deliver it to enterprises with a promise of 10 years of support. Open source projects like Linux can literally change every day, so that’s a tall order.</p>
<p>So how do they live in the opensource market?
Is monetizing opensource stuff good?</p>
<p>GPL, the most renowned license in the opensource world, permits monetising the code.
So where are people going wrong in their attempts to monetise their works?</p>
<p>Greed is good, yes read it again, greed is good. Money rules life.</p>
<p>Lets see possible ways to monetize an opensource project.</p>
<h4 id="advertising">Advertising</h4>
<p>Monetize download links with ads, you must have seen a few people doing this. The download link is url shortened and is sent to the public.</p>
<p>Ads on the project website can also be a possible way to monetise your project.</p>
<h4 id="paid-features">Paid Features</h4>
<p>Lemme cite an example of this case. The pretty famous Hyperion Launcher for android is opensource. But it does have features like gestures and widgets which needs the hyperion supreme package, the paid version. The developer earns in the case where people pay for using all the cool features which are locked.</p>
<p>(( Lawnchair laughs ))</p>
<h4 id="dual-licensing">Dual Licensing</h4>
<p>Dual licensing allows companies to release commercial software (with a commercial license) that’s derived from free OSS commonly distributed under the GNU General Public (GPL) license. A company releases identical products under a commercial license and under a free license like GPL. MySQL is a pretty good example of this case, where they produce community edition under GPL and enterprise edition under their own commercial license</p>
<h4 id="paid-support">Paid Support</h4>
<p>Red Hat promises really great customer support for their premium enterprise Linux Distribution. People who rely on their servers a lot usually pay for this paid support since this ensures their servers never breaks down. This all happens while their linux source code is fully opensource.</p>
<p>Open source software is highly regarded thanks to its security, reliability, and vibrant communities that support it. Moreover, OSS helps companies avoid reinventing the wheel, and can even be used within proprietary software. Altogether, these factors have made OSS quite popular. Today, people are willing to pay for open source software to ensure legal protection, technical support, and professional services. With paid open source technologies, companies can offer the best of both worlds: transparent technology with the support and features of commercial software.</p>
]]></content>
        </item>
        
    </channel>
</rss>
